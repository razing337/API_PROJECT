from aiogram import Bot, Dispatcher, types
from database import Database
from config import APITOKEN, ADMINID

bot = Bot(token=APITOKEN)
dispatcher = Dispatcher(bot)

database = Database("database.db")

censure = []
with open("censure.txt", "r", encoding="utf8") as file:
    for word in file:
        censure.append("".join(word.split()))


@dispatcher.messagehandler(commands='start')
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–ª–æ—Ö–æ–π –±–æ—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—Å–µ—Ö –±–∞–Ω–∏—Ç—å :)")


@dispatcher.messagehandler(commands=['getid'])
async def getid(message: types.Message):
    await message.answer(message.fromuser.id)


@dispatcher.messagehandler(commands=['kick'])
async def kick(message: types.Message):
    if message.fromuser.id == ADMINID:
        if not message.replytomessage:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        await message.bot.kickchatmember(message.chat.id, message.replytomessage.fromuser.id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.replytomessage.fromuser.username} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –±–µ—Å–µ–¥—ã.")
        await message.delete()


@dispatcher.messagehandler(commands='ban')
async def kick(message: types.Message):
    if message.fromuser.id == ADMINID:
        if not message.replytomessage:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        await message.bot.banchatmember(message.chat.id, message.replytomessage.fromuser.id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.replytomessage.fromuser.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –±–µ—Å–µ–¥–µ.")
        await message.delete()


@dispatcher.messagehandler(commands=['unban'])
async def unban(message: types.Message):
    if message.fromuser.id == ADMINID:
        if not message.replytomessage:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        await message.bot.unbanchatmember(message.chat.id, message.replytomessage.fromuser.id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.replytomessage.fromuser.username} —Ä–∞–∑–±–∞–Ω–µ–Ω –≤ –±–µ—Å–µ–¥–µ.")
        await message.delete()


@dispatcher.messagehandler(commands='mute')
async def mute(message: types.Message):
    if message.fromuser.id == ADMINID:
        if not message.replytomessage:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        if len(message.text.split()) < 2:
            await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø—Ä–∏–º–µ—Ä: /mute 60")
            return
        mutetime = int(message.text.split()[1])
        database.addmute(userid=message.replytomessage.fromuser.id, mutetime=mutetime)
        await message.delete()
        await message.replytomessage.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.replytomessage.fromuser.username} –∑–∞–º—É—á–µ–Ω –Ω–∞ {mutetime} —Å–µ–∫—É–Ω–¥!")


@dispatcher.messagehandler(contenttypes='new_chat_members')
async def newuserinchat(message: types.Message):
    await message.delete()


@dispatcher.messagehandler(contenttypes=['leftchatmember'])
async def userleftfromchat(message: types.Message):
    await message.delete()


@dispatcher.messagehandler()
async def deletecensure(message: types.Message):
    messagelist = message.text.lower().split()
    for usermessage in messagelist:
        if usermessage in censure:
            await message.delete()
            await message.answer("–ù–µ –Ω—É–∂–Ω–æ —Ç–∞–∫–æ–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å")
            break

    if not database.examination(message.fromuser.id):
        database.add(message.fromuser.id)
    if not database.mute(message.fromuser.id):
        pass
    else:
        await bot.restrictchatmember(message.chat.id, message.fromuser.id, untildate=None)

if name == 'main':
    executor.startpolling(dispatcher)